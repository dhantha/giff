{
  "name": "gifencoder",
  "version": "1.1.0",
  "description": "Streaming server-side animated (and non-animated) gif generation for node.js",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/eugeneware/gifencoder"
  },
  "keywords": [
    "gif",
    "encode",
    "encoder",
    "GIF",
    "encoding",
    "animated",
    "canvas",
    "node-canvas",
    "server",
    "image",
    "images",
    "animations"
  ],
  "author": {
    "name": "Eugene Ware",
    "email": "eugene@noblesamurai.com"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/eugeneware/gifencoder/issues"
  },
  "dependencies": {},
  "devDependencies": {
    "after": "~0.8.1",
    "canvas": "^1.6.4",
    "concat-stream": "^1.4.6",
    "expect.js": "^0.3.1",
    "mocha": "^3.4.2",
    "png-file-stream": "^1.0.0",
    "png-js": "~0.1.1",
    "range": "0.0.2"
  },
  "readme": "# gifencoder\n\nStreaming server-side animated (and non-animated) gif generation for node.js\n\nThis code is based on the fine work of the following developers, but adds\nserver-side generation with [node-canvas](https://github.com/learnboost/node-canvas)\nand support for node.js Buffers:\n\n* Kevin Weiner (original Java version - kweiner@fmsware.com)\n* Thibault Imbert (AS3 version - bytearray.org)\n* Johan Nordberg ([gif.js](http://jnordberg.github.io/gif.js/) - code@johan-nordberg.com)\n\n## Installation\n\nThis module is installed via npm:\n\n``` bash\n$ npm install gifencoder\n```\n\n## Streaming API - Duplex Piping with Writes\n\nYou can also stream writes of pixel data (or canvas contexts) to the encoder:\n\n``` js\nvar GIFEncoder = require('gifencoder');\nvar encoder = new GIFEncoder(854, 480);\nvar pngFileStream = require('png-file-stream');\nvar fs = require('fs');\n\npngFileStream('test/**/frame?.png')\n  .pipe(encoder.createWriteStream({ repeat: -1, delay: 500, quality: 10 }))\n  .pipe(fs.createWriteStream('myanimated.gif'));\n```\n\nNB: The chunks that get emitted by your read stream must either by a 1-dimensional bitmap of RGBA\ndata (either an array or Buffer), or a canvas 2D `context`.\n\n## Example: Streaming API - Reads\n\nYou can also use a streaming API to receive data:\n\n``` js\nvar GIFEncoder = require('gifencoder');\nvar Canvas = require('canvas');\nvar fs = require('fs');\n\nvar encoder = new GIFEncoder(320, 240);\n// stream the results as they are available into myanimated.gif\nencoder.createReadStream().pipe(fs.createWriteStream('myanimated.gif'));\n\nencoder.start();\nencoder.setRepeat(0);   // 0 for repeat, -1 for no-repeat\nencoder.setDelay(500);  // frame delay in ms\nencoder.setQuality(10); // image quality. 10 is default.\n\n// use node-canvas\nvar canvas = new Canvas(320, 240);\nvar ctx = canvas.getContext('2d');\n\n// red rectangle\nctx.fillStyle = '#ff0000';\nctx.fillRect(0, 0, 320, 240);\nencoder.addFrame(ctx);\n\n// green rectangle\nctx.fillStyle = '#00ff00';\nctx.fillRect(0, 0, 320, 240);\nencoder.addFrame(ctx);\n\n// blue rectangle\nctx.fillStyle = '#0000ff';\nctx.fillRect(0, 0, 320, 240);\nencoder.addFrame(ctx);\n\nencoder.finish();\n```\nThe above code will generate the following animated GIF:\n\n![Animated GIF](https://raw.github.com/eugeneware/gifencoder/master/examples/myanimated.gif)\n",
  "readmeFilename": "README.md",
  "_id": "gifencoder@1.1.0",
  "dist": {
    "shasum": "94ee4423c17495d78c65e6567318990e1b6fb65c"
  },
  "_from": "gifencoder@1.1.0",
  "_resolved": "http://registry.npmjs.org/gifencoder/-/gifencoder-1.1.0.tgz"
}
