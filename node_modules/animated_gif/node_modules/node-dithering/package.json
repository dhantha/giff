{
  "name": "node-dithering",
  "version": "0.0.1",
  "description": "various algorithms for image dithering in JavaScript",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sole/node-dithering.git"
  },
  "keywords": [
    "dithering",
    "image",
    "processing",
    "retro"
  ],
  "author": {
    "name": "sole"
  },
  "license": "GPL",
  "bugs": {
    "url": "https://github.com/sole/node-dithering/issues"
  },
  "homepage": "https://github.com/sole/node-dithering",
  "readme": "# node-dithering\n\navailable algorithms:\n\n* Bayer\n* Closest\n* Floyd-Steinberg\n\nAll of them using this method signature:\n\n````javascript\nfunction(inPixels, width, height, palette)\n````\nwhere\n\n* `inPixels` is an array of rgb values - three values per pixel\n* `width` and `height` define the size of the image\n* `palette` is the desired output palette - and array of hexadecimal colour values. eg. `[ 0xff0000, 0x000000 ]` would be red and black\n\nReturn is an unsigned byte arraybuffer with the output values in consecutive r, g, b bytes per pixel.\n\nThis is deliberately raw and unpacked for speed reasons.\n\n## warning\n\nthis is under development so expect BOMBS to fall all around you. alternatively your script might hang. boom!\n",
  "readmeFilename": "README.md",
  "_id": "node-dithering@0.0.1",
  "dist": {
    "shasum": "5967515c3518d52632521b9bac6c0536888efa30"
  },
  "_from": "node-dithering@0.0.1",
  "_resolved": "http://registry.npmjs.org/node-dithering/-/node-dithering-0.0.1.tgz"
}
